{"ast":null,"code":"import { GET_CONTACTS, SET_LOADING, ADD_CONTACT, SET_LOADINGFORM, CLOSE_ALERT_ERROR, OPEN_ALERT_ERROR, DELETE_CONTACT, SET_CONTACT, CLEAR_CURRENT, FILTER_CONTACTS, CLEAR_FILTER } from '../types.js';\nimport axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'http://localhost:3000/api'\n});\nexport const getContacts = () => async dispatch => {\n  try {\n    //loading true\n    dispatch({\n      type: SET_LOADING\n    });\n    const res = await instance.get('/contacts');\n    dispatch({\n      type: GET_CONTACTS,\n      payload: res.data\n    });\n  } catch (error) {}\n};\nexport const postContact = contact => async dispatch => {\n  try {\n    dispatch({\n      type: SET_LOADINGFORM\n    });\n    const res = await instance.post('/contacts', contact);\n    dispatch({\n      type: ADD_CONTACT,\n      payload: res.data.data\n    });\n  } catch (error) {\n    console.log('error');\n  }\n};\nexport const closeError = () => dispatch => {\n  dispatch({\n    type: CLOSE_ALERT_ERROR\n  });\n};\nexport const deleteContact = id => async dispatch => {\n  try {\n    await instance.delete(`/contacts/${id}`);\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const setContact = contact => dispatch => {\n  dispatch({\n    type: SET_CONTACT,\n    payload: contact\n  });\n};\nexport const clearCurrent = () => dispatch => {\n  dispatch({\n    type: CLEAR_CURRENT\n  });\n};\nexport const filterContacts = text => dispatch => {\n  dispatch({\n    type: FILTER_CONTACTS,\n    payload: text\n  });\n};\nexport const clearFilter = () => dispatch => {\n  dispatch({\n    type: CLEAR_FILTER\n  });\n};","map":{"version":3,"sources":["/Users/mbowler/Desktop/card copy/client/src/redux/actions/contactActions.js"],"names":["GET_CONTACTS","SET_LOADING","ADD_CONTACT","SET_LOADINGFORM","CLOSE_ALERT_ERROR","OPEN_ALERT_ERROR","DELETE_CONTACT","SET_CONTACT","CLEAR_CURRENT","FILTER_CONTACTS","CLEAR_FILTER","axios","instance","create","baseURL","getContacts","dispatch","type","res","get","payload","data","error","postContact","contact","post","console","log","closeError","deleteContact","id","delete","setContact","clearCurrent","filterContacts","text","clearFilter"],"mappings":"AAAA,SACIA,YADJ,EAEIC,WAFJ,EAGIC,WAHJ,EAIIC,eAJJ,EAKIC,iBALJ,EAMIC,gBANJ,EAOIC,cAPJ,EAQIC,WARJ,EASIC,aATJ,EAUIC,eAVJ,EAWIC,YAXJ,QAYO,aAZP;AAaA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE;AADiB,CAAb,CAAjB;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC/C,MAAI;AACA;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEhB;AADD,KAAD,CAAR;AAIA,UAAMiB,GAAG,GAAG,MAAMN,QAAQ,CAACO,GAAT,CAAa,WAAb,CAAlB;AACAH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEjB,YADD;AAELoB,MAAAA,OAAO,EAAEF,GAAG,CAACG;AAFR,KAAD,CAAR;AAIH,GAXD,CAWE,OAAOC,KAAP,EAAc,CAEf;AACJ,CAfM;AAiBP,OAAO,MAAMC,WAAW,GAAIC,OAAD,IAAa,MAAMR,QAAN,IAAiB;AACrD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEd;AADD,KAAD,CAAR;AAGA,UAAMe,GAAG,GAAG,MAAMN,QAAQ,CAACa,IAAT,CAAc,WAAd,EAA2BD,OAA3B,CAAlB;AACAR,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEf,WADD;AAELkB,MAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASA;AAFb,KAAD,CAAR;AAIH,GATD,CASE,OAAOC,KAAP,EAAc;AACZI,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACC;AAEJ,CAdE;AAiBP,OAAO,MAAMC,UAAU,GAAG,MAAKZ,QAAQ,IAAG;AACtCA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEb;AADD,GAAD,CAAR;AAGH,CAJM;AAMP,OAAO,MAAMyB,aAAa,GAAIC,EAAD,IAAO,MAAMd,QAAN,IAAgB;AAChD,MAAI;AACA,UAAMJ,QAAQ,CAACmB,MAAT,CAAiB,aAAYD,EAAG,EAAhC,CAAN;AACAd,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEX,cADD;AAELc,MAAAA,OAAO,EAAEU;AAFJ,KAAD,CAAR;AAKH,GAPD,CAOE,OAAOR,KAAP,EAAc;AACZI,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACH;AACJ,CAXM;AAaP,OAAO,MAAMU,UAAU,GAAIR,OAAD,IAAYR,QAAQ,IAAE;AAC5CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEV,WADD;AAELa,IAAAA,OAAO,EAAEI;AAFJ,GAAD,CAAR;AAIH,CALM;AAOP,OAAO,MAAMS,YAAY,GAAG,MAAKjB,QAAQ,IAAE;AACvCA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAET;AADD,GAAD,CAAR;AAGH,CAJM;AAMP,OAAO,MAAM0B,cAAc,GAAGC,IAAI,IAAInB,QAAQ,IAAE;AAC5CA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAER,eAAP;AAAwBW,IAAAA,OAAO,EAAEe;AAAjC,GAAD,CAAR;AACH,CAFM;AAIP,OAAO,MAAMC,WAAW,GAAG,MAAKpB,QAAQ,IAAE;AACtCA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEP;AAAP,GAAD,CAAR;AACH,CAFM","sourcesContent":["import {\n    GET_CONTACTS, \n    SET_LOADING, \n    ADD_CONTACT, \n    SET_LOADINGFORM, \n    CLOSE_ALERT_ERROR, \n    OPEN_ALERT_ERROR,\n    DELETE_CONTACT,\n    SET_CONTACT,\n    CLEAR_CURRENT,\n    FILTER_CONTACTS,\n    CLEAR_FILTER\n} from '../types.js'\nimport axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'http://localhost:3000/api'\n})\nexport const getContacts = () => async dispatch => {\n    try {\n        //loading true\n        dispatch({\n            type: SET_LOADING\n        })\n        \n        const res = await instance.get('/contacts')\n        dispatch({\n            type: GET_CONTACTS,\n            payload: res.data\n        })\n    } catch (error) {\n        \n    }\n}\n\nexport const postContact = (contact) => async dispatch =>{\n    try {\n        dispatch({\n            type: SET_LOADINGFORM\n        })\n        const res = await instance.post('/contacts', contact)\n        dispatch({\n            type: ADD_CONTACT,\n            payload: res.data.data\n        })\n    } catch (error) {\n        console.log('error')\n        }\n        \n    }\n\n\nexport const closeError = ()=> dispatch =>{\n    dispatch({\n        type: CLOSE_ALERT_ERROR\n    })\n}\n\nexport const deleteContact = (id)=> async dispatch=>{\n    try {\n        await instance.delete(`/contacts/${id}`)       \n        dispatch({\n            type: DELETE_CONTACT,\n            payload: id\n        })\n    \n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const setContact = (contact)=> dispatch=>{\n    dispatch({\n        type: SET_CONTACT,\n        payload: contact\n    })\n}\n\nexport const clearCurrent = ()=> dispatch=>{\n    dispatch({\n        type: CLEAR_CURRENT\n    })\n}\n\nexport const filterContacts = text => dispatch=>{\n    dispatch({type: FILTER_CONTACTS, payload: text})\n}\n\nexport const clearFilter = ()=> dispatch=>{\n    dispatch({type: CLEAR_FILTER})\n}"]},"metadata":{},"sourceType":"module"}